<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\IOTKit_CM33_s.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\IOTKit_CM33_s.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Thu Nov 14 00:05:44 2024
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8f]">SECURE_NOPE</a>
 <LI><a href="#[90]">SECURE_register_callback</a>
 <LI><a href="#[91]">SECURE_start_cfa</a>
 <LI><a href="#[92]">Secure_LED_On</a>
 <LI><a href="#[93]">Secure_LED_Off</a>
 <LI><a href="#[94]">Secure_printf</a>
 <LI><a href="#[95]">Secure_LED_On_callback</a>
 <LI><a href="#[96]">Secure_LED_Off_callback</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">BRIDGE_ERROR_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2d]">DMA0_ERROR_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2f]">DMA0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2e]">DMA0_TC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[30]">DMA1_ERROR_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[32]">DMA1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[31]">DMA1_TC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[33]">DMA2_ERROR_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[35]">DMA2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[34]">DMA2_TC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[36]">DMA3_ERROR_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[38]">DMA3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[37]">DMA3_TC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[10]">DUALTIMER_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[25]">ETHERNET_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3d]">GPIO0_0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[47]">GPIO0_10_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[48]">GPIO0_11_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[49]">GPIO0_12_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4a]">GPIO0_13_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4b]">GPIO0_14_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4c]">GPIO0_15_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3e]">GPIO0_1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3f]">GPIO0_2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[40]">GPIO0_3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[41]">GPIO0_4_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[42]">GPIO0_5_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[43]">GPIO0_6_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[44]">GPIO0_7_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[45]">GPIO0_8_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[46]">GPIO0_9_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[39]">GPIO0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4d]">GPIO1_0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[57]">GPIO1_10_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[58]">GPIO1_11_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[59]">GPIO1_12_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[5a]">GPIO1_13_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[5b]">GPIO1_14_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[5c]">GPIO1_15_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4e]">GPIO1_1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[4f]">GPIO1_2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[50]">GPIO1_3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[51]">GPIO1_4_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[52]">GPIO1_5_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[53]">GPIO1_6_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[54]">GPIO1_7_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[55]">GPIO1_8_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[56]">GPIO1_9_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3a]">GPIO1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[5d]">GPIO2_0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[67]">GPIO2_10_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[68]">GPIO2_11_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[69]">GPIO2_12_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6a]">GPIO2_13_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6b]">GPIO2_14_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6c]">GPIO2_15_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[5e]">GPIO2_1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[5f]">GPIO2_2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[60]">GPIO2_3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[61]">GPIO2_4_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[62]">GPIO2_5_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[63]">GPIO2_6_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[64]">GPIO2_7_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[65]">GPIO2_8_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[66]">GPIO2_9_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3b]">GPIO2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6d]">GPIO3_0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6e]">GPIO3_1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6f]">GPIO3_2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[70]">GPIO3_3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3c]">GPIO3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_iotkit_cm33.o(.text.HardFault_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[26]">I2S_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[11]">MPC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[13]">MSC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[c]">NONSEC_WATCHDOG_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[b]">NONSEC_WATCHDOG_RESET_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[12]">PPC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_iotkit_cm33.o(.text.Reset_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[d]">S32K_TIMER_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[28]">SPI0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[29]">SPI1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2a]">SPI2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2b]">SPI3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[2c]">SPI4_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from main_s.o(.text.SysTick_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[e]">TIMER0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[f]">TIMER1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[27]">TSC_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[15]">UART0RX_Handler</a> from usart_v2m-mps2.o(.text.UART0RX_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[16]">UART0TX_Handler</a> from usart_v2m-mps2.o(.text.UART0TX_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1f]">UART0_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[17]">UART1RX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[18]">UART1TX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[20]">UART1_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[19]">UART2RX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1a]">UART2TX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[21]">UART2_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1b]">UART3RX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1c]">UART3TX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[22]">UART3_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1d]">UART4RX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[1e]">UART4TX_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[23]">UART4_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[24]">UARTOVF_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[82]">USART0_Control</a> from usart_v2m-mps2.o(.text.USART0_Control) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[79]">USART0_GetCapabilities</a> from usart_v2m-mps2.o(.text.USART0_GetCapabilities) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[85]">USART0_GetModemStatus</a> from usart_v2m-mps2.o(.text.USART0_GetModemStatus) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[81]">USART0_GetRxCount</a> from usart_v2m-mps2.o(.text.USART0_GetRxCount) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[83]">USART0_GetStatus</a> from usart_v2m-mps2.o(.text.USART0_GetStatus) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[80]">USART0_GetTxCount</a> from usart_v2m-mps2.o(.text.USART0_GetTxCount) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[7a]">USART0_Initialize</a> from usart_v2m-mps2.o(.text.USART0_Initialize) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[7c]">USART0_PowerControl</a> from usart_v2m-mps2.o(.text.USART0_PowerControl) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[7e]">USART0_Receive</a> from usart_v2m-mps2.o(.text.USART0_Receive) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[7d]">USART0_Send</a> from usart_v2m-mps2.o(.text.USART0_Send) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[84]">USART0_SetModemControl</a> from usart_v2m-mps2.o(.text.USART0_SetModemControl) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[7f]">USART0_Transfer</a> from usart_v2m-mps2.o(.text.USART0_Transfer) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[7b]">USART0_Uninitialize</a> from usart_v2m-mps2.o(.text.USART0_Uninitialize) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[78]">USARTx_GetVersion</a> from usart_v2m-mps2.o(.text.USARTx_GetVersion) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_iotkit_cm33.o(.text.Default_Handler) referenced from startup_iotkit_cm33.o(RESET)
 <LI><a href="#[73]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[72]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[71]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[74]">hardfault_handler</a> from mtb.o(.text.hardfault_handler) referenced 2 times from mtb.o(.text.config_hardfault_handler)
 <LI><a href="#[76]">mtb_debugMonitorHandler</a> from mtb.o(.text.mtb_debugMonitorHandler) referenced 2 times from mtb.o(.text.mtb_config_interrupthandlers)
 <LI><a href="#[77]">mtb_debugMonitorHandlerEmpty</a> from mtb.o(.text.mtb_debugMonitorHandlerEmpty) referenced 2 times from mtb.o(.text.mtb_remove_debugMonitor)
 <LI><a href="#[75]">pendsv_handler</a> from mtb.o(.text.pendsv_handler) referenced 2 times from mtb.o(.text.config_hardfault_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[147]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[148]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[149]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[14a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[e4]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[9f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a1]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[14b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[a5]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a7]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ab]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ad]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[b3]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[14c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[b5]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b7]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[b9]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[bb]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[14d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[cb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[bf]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[150]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[151]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[152]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[153]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[154]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[155]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[156]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[157]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[158]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[159]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[15d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[160]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[161]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[162]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[164]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[98]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[16a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[16b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[ca]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[cc]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[105]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cf]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d3]"></a>printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRIDGE_ERROR_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_start_cfa
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_register_callback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__debug_DWT_Registers
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__debug_MTB_Registers
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_setup_MTB
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pendsv_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_debugMonitorHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMTB_sendBuffer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_setup_DWT
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[135]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[d6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[d7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[d8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a6]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[9c]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[d4]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[dd]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[ae]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[e0]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[aa]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[b2]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[e1]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ac]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b4]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[9e]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e2]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[df]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ea]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ed]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[db]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ee]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[b8]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ef]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ba]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[bc]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[dc]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c7]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[c9]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[f6]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[de]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[f7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[c2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[f5]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[ec]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e6]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[146]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[172]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f1]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[102]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[f4]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[173]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f2]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f8]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[174]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[10a]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c0]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[fe]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[101]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[178]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ff]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[103]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[fa]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[107]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[106]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[d2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[179]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[17b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[10d]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[17e]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[10b]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[112]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[17f]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[14]"></a>BRIDGE_ERROR_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BRIDGE_ERROR_Handler &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_ERROR_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_TC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_TC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_ERROR_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_TC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_TC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA2_ERROR_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_TC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_TC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA3_ERROR_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA3_ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA3_TC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA3_TC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DUALTIMER_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DUALTIMER_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>Default_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[25]"></a>ETHERNET_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETHERNET_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIO0_0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO0_10_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO0_11_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIO0_12_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO0_13_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO0_14_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIO0_15_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIO0_1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIO0_2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO0_3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIO0_4_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIO0_5_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIO0_6_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIO0_7_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIO0_8_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIO0_9_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIO0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIO1_0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_10_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_11_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_12_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_13_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_14_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_15_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO1_1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIO1_2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO1_3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIO1_4_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_5_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_6_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_7_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_8_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_9_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GPIO1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO2_10_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO2_11_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO2_12_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO2_13_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO2_14_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO2_15_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO2_1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO2_2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO2_3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO2_4_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO2_5_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO2_6_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO2_7_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO2_8_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO2_9_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIO2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO3_0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO3_1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIO3_2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIO3_3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIO3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MPC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MSC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NONSEC_WATCHDOG_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NONSEC_WATCHDOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NONSEC_WATCHDOG_RESET_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NONSEC_WATCHDOG_RESET_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PPC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>S32K_TIMER_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S32K_TIMER_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI4_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TSC_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1RX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1RX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1TX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1TX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2RX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2RX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART2TX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2TX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART2_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART3RX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3RX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART3TX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3TX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART3_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART4RX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4RX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART4TX_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4TX_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART4_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UARTOVF_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTOVF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.Default_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startup_iotkit_cm33.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>LED_Off</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, led_v2m-mps2.o(.text.LED_Off), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_LED_Off
</UL>

<P><STRONG><a name="[119]"></a>LED_On</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, led_v2m-mps2.o(.text.LED_On), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_LED_On
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, startup_iotkit_cm33.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>__acle_se_SECURE_NOPE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, secure_functions.o(.text.SECURE_NOPE), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURE_NOPE
</UL>

<P><STRONG><a name="[87]"></a>__acle_se_SECURE_register_callback</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, secure_functions.o(.text.SECURE_register_callback), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __acle_se_SECURE_register_callback &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURE_register_callback
</UL>

<P><STRONG><a name="[88]"></a>__acle_se_SECURE_start_cfa</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, secure_functions.o(.text.SECURE_start_cfa), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __acle_se_SECURE_start_cfa &rArr; eCFA_init_cfa &rArr; mtb_init &rArr; mtb_setup_DWT &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_stat
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURE_start_cfa
</UL>

<P><STRONG><a name="[8a]"></a>__acle_se_Secure_LED_Off</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, secure_functions.o(.text.Secure_LED_Off), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __acle_se_Secure_LED_Off &rArr; LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secure_LED_Off
</UL>

<P><STRONG><a name="[8d]"></a>__acle_se_Secure_LED_Off_callback</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, secure_functions.o(.text.Secure_LED_Off_callback), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __acle_se_Secure_LED_Off_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secure_LED_Off_callback
</UL>

<P><STRONG><a name="[89]"></a>__acle_se_Secure_LED_On</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, secure_functions.o(.text.Secure_LED_On), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __acle_se_Secure_LED_On &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secure_LED_On
</UL>

<P><STRONG><a name="[8c]"></a>__acle_se_Secure_LED_On_callback</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, secure_functions.o(.text.Secure_LED_On_callback), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __acle_se_Secure_LED_On_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secure_LED_On_callback
</UL>

<P><STRONG><a name="[8b]"></a>__acle_se_Secure_printf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, secure_functions.o(.text.Secure_printf), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __acle_se_Secure_printf &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secure_printf
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main_s.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_iotkit_cm33.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>SystemInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, system_iotkit_cm33.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_SAU_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[15]"></a>UART0RX_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.UART0RX_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0RX_Handler &rArr; USARTRX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTRX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART0TX_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.UART0TX_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0TX_Handler &rArr; USARTTX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iotkit_cm33.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>__debug_DWT_Registers</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, mtb.o(.text.__debug_DWT_Registers), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __debug_DWT_Registers &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
</UL>

<P><STRONG><a name="[130]"></a>__debug_MTB_Registers</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mtb.o(.text.__debug_MTB_Registers), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __debug_MTB_Registers &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
</UL>

<P><STRONG><a name="[117]"></a>_clear_stat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, secure_functions.o(.text._clear_stat), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_start_cfa
</UL>

<P><STRONG><a name="[115]"></a>_set_stat</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, secure_functions.o(.text._set_stat), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _set_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_start_cfa
</UL>

<P><STRONG><a name="[104]"></a>_sys_close</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[fc]"></a>_sys_flen</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fd]"></a>_sys_istty</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[100]"></a>_sys_open</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[10e]"></a>_sys_seek</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[10f]"></a>_sys_write</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[133]"></a>config_hardfault_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mtb.o(.text.config_hardfault_handler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = config_hardfault_handler &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
</UL>

<P><STRONG><a name="[116]"></a>eCFA_init_cfa</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, cfa.o(.text.eCFA_init_cfa), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = eCFA_init_cfa &rArr; mtb_init &rArr; mtb_setup_DWT &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__debug_DWT_Registers
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__debug_MTB_Registers
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_exit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMTB_sendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_start_cfa
</UL>

<P><STRONG><a name="[74]"></a>hardfault_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mtb.o(.text.hardfault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hardfault_handler &rArr; vMTB_sendBuffer &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMTB_sendBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtb.o(.text.config_hardfault_handler)
</UL>
<P><STRONG><a name="[cd]"></a>main</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, main_s.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_GetFPUType
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13d]"></a>mtb_cleanMTB</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mtb.o(.text.mtb_cleanMTB), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtb_cleanMTB
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_exit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_setup_MTB
</UL>

<P><STRONG><a name="[13c]"></a>mtb_config_interrupthandlers</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mtb.o(.text.mtb_config_interrupthandlers), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mtb_config_interrupthandlers &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
</UL>

<P><STRONG><a name="[76]"></a>mtb_debugMonitorHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mtb.o(.text.mtb_debugMonitorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mtb_debugMonitorHandler &rArr; vMTB_sendBuffer &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMTB_sendBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtb.o(.text.mtb_config_interrupthandlers)
</UL>
<P><STRONG><a name="[77]"></a>mtb_debugMonitorHandlerEmpty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mtb.o(.text.mtb_debugMonitorHandlerEmpty))
<BR>[Address Reference Count : 1]<UL><LI> mtb.o(.text.mtb_remove_debugMonitor)
</UL>
<P><STRONG><a name="[138]"></a>mtb_exit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mtb.o(.text.mtb_exit), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mtb_exit &rArr; mtb_cleanMTB
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_remove_debugMonitor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_cleanMTB
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
</UL>

<P><STRONG><a name="[136]"></a>mtb_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mtb.o(.text.mtb_init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mtb_init &rArr; mtb_setup_DWT &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_setup_MTB
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_config_interrupthandlers
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_hardfault_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_setup_DWT
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
</UL>

<P><STRONG><a name="[13e]"></a>mtb_remove_debugMonitor</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mtb.o(.text.mtb_remove_debugMonitor), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mtb_remove_debugMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_exit
</UL>

<P><STRONG><a name="[13f]"></a>mtb_setup_DWT</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, mtb.o(.text.mtb_setup_DWT), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mtb_setup_DWT &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
</UL>

<P><STRONG><a name="[140]"></a>mtb_setup_MTB</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mtb.o(.text.mtb_setup_MTB), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mtb_setup_MTB &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_cleanMTB
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
</UL>

<P><STRONG><a name="[75]"></a>pendsv_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mtb.o(.text.pendsv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pendsv_handler &rArr; vMTB_sendBuffer &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMTB_sendBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtb.o(.text.config_hardfault_handler)
</UL>
<P><STRONG><a name="[13b]"></a>stdout_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stdout_usart.o(.text.stdout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stdout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>stdout_putchar</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stdout_usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[137]"></a>vMTB_sendBuffer</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mtb.o(.text.vMTB_sendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vMTB_sendBuffer &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCFA_init_cfa
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pendsv_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_debugMonitorHandler
</UL>

<P><STRONG><a name="[e7]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[142]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[141]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[143]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[144]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e8]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[e9]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[145]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[eb]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e3]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[71]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[73]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[182]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[183]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[a0]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[a4]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[8f]"></a>SECURE_NOPE</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_NOPE
</UL>

<P><STRONG><a name="[90]"></a>SECURE_register_callback</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SECURE_register_callback &rArr; __acle_se_SECURE_register_callback &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_register_callback
</UL>

<P><STRONG><a name="[91]"></a>SECURE_start_cfa</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SECURE_start_cfa &rArr; __acle_se_SECURE_start_cfa &rArr; eCFA_init_cfa &rArr; mtb_init &rArr; mtb_setup_DWT &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_SECURE_start_cfa
</UL>

<P><STRONG><a name="[92]"></a>Secure_LED_On</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Secure_LED_On &rArr; __acle_se_Secure_LED_On &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_LED_On
</UL>

<P><STRONG><a name="[93]"></a>Secure_LED_Off</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Secure_LED_Off &rArr; __acle_se_Secure_LED_Off &rArr; LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_LED_Off
</UL>

<P><STRONG><a name="[94]"></a>Secure_printf</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Secure_printf &rArr; __acle_se_Secure_printf &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_printf
</UL>

<P><STRONG><a name="[95]"></a>Secure_LED_On_callback</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Secure_LED_On_callback &rArr; __acle_se_Secure_LED_On_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_LED_On_callback
</UL>

<P><STRONG><a name="[96]"></a>Secure_LED_Off_callback</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Secure_LED_Off_callback &rArr; __acle_se_Secure_LED_Off_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_Secure_LED_Off_callback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[139]"></a>SCB_GetFPUType</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main_s.o(.text.SCB_GetFPUType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_GetFPUType
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>SysTick_Config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main_s.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main_s.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[134]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mtb.o(.text.__NVIC_SetPriority), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_config_interrupthandlers
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_hardfault_handler
</UL>

<P><STRONG><a name="[11d]"></a>USARTRX_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USARTRX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTRX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RX_Handler
</UL>

<P><STRONG><a name="[11e]"></a>USARTTX_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USARTTX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTTX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0TX_Handler
</UL>

<P><STRONG><a name="[78]"></a>USARTx_GetVersion</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.USARTx_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USARTx_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[79]"></a>USART0_GetCapabilities</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_GetCapabilities &rArr; USART_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[120]"></a>USART_GetCapabilities</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetCapabilities
</UL>

<P><STRONG><a name="[7a]"></a>USART0_Initialize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART0_Initialize &rArr; USART_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[125]"></a>USART_Initialize</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, usart_v2m-mps2.o(.text.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Initialize
</UL>

<P><STRONG><a name="[7b]"></a>USART0_Uninitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART0_Uninitialize &rArr; USART_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[12b]"></a>USART_Uninitialize</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.USART_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Uninitialize
</UL>

<P><STRONG><a name="[7c]"></a>USART0_PowerControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART0_PowerControl &rArr; USART_PowerControl &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[126]"></a>USART_PowerControl</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, usart_v2m-mps2.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_PowerControl &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_PowerControl
</UL>

<P><STRONG><a name="[7d]"></a>USART0_Send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_Send &rArr; USART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[128]"></a>USART_Send</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
</UL>

<P><STRONG><a name="[7e]"></a>USART0_Receive</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_Receive &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[127]"></a>USART_Receive</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
</UL>

<P><STRONG><a name="[7f]"></a>USART0_Transfer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_v2m-mps2.o(.text.USART0_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART0_Transfer &rArr; USART_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[12a]"></a>USART_Transfer</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Transfer
</UL>

<P><STRONG><a name="[80]"></a>USART0_GetTxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART0_GetTxCount &rArr; USART_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[124]"></a>USART_GetTxCount</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.USART_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetTxCount
</UL>

<P><STRONG><a name="[81]"></a>USART0_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART0_GetRxCount &rArr; USART_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[122]"></a>USART_GetRxCount</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.USART_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetRxCount
</UL>

<P><STRONG><a name="[82]"></a>USART0_Control</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_Control &rArr; USART_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[11f]"></a>USART_Control</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, usart_v2m-mps2.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Control
</UL>

<P><STRONG><a name="[83]"></a>USART0_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[123]"></a>USART_GetStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetStatus
</UL>

<P><STRONG><a name="[84]"></a>USART0_SetModemControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[129]"></a>USART_SetModemControl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SetModemControl
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SetModemControl
</UL>

<P><STRONG><a name="[85]"></a>USART0_GetModemStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USART0_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[121]"></a>USART_GetModemStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetModemStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetModemStatus
</UL>

<P><STRONG><a name="[12c]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[12d]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[12e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usart_v2m-mps2.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[11c]"></a>TZ_SAU_Setup</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, system_iotkit_cm33.o(.text.TZ_SAU_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e5]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[72]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
